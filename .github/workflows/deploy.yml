name: Deploy on main server

on:
  push:
    branches: ["main"]

env:
  REGISTRY_URL: docker.io

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    container:
      image: tmknom/prettier:3.6.2
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check formatting
        run: prettier --check .

  build:
    needs: check-formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get short commit hash
        id: commit_hash
        run: echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Debugging secrets and variables
        run: |
          echo "DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}"
          echo "Branch: ${{ steps.extract_branch.outputs.branch }}"
          echo "Commit: ${{ steps.commit_hash.outputs.commit }}"

      - name: Build the Docker image
        run: |
          IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.APP_NAME }}_${{ steps.extract_branch.outputs.branch }}_${{ steps.commit_hash.outputs.commit }}
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t ${{ env.REGISTRY_URL }}/$IMAGE_TAG .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ env.REGISTRY_URL }}
          docker push ${{ env.REGISTRY_URL }}/$IMAGE_TAG
          docker logout

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get short commit hash
        id: commit_hash
        run: echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Deploy to Server
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          IMAGE_TAG: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ secrets.APP_NAME }}_${{ steps.extract_branch.outputs.branch }}_${{ steps.commit_hash.outputs.commit }}
        run: |
          ssh -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USERNAME@$SSH_HOST << EOF
          # Pull the Docker image first
          docker pull $IMAGE_TAG

            # Stop and remove containers using port 8000
            container_ids=\$(docker ps -q --filter "expose=8000")
            if [ -n "\$container_ids" ]; then
              echo "Stopping and removing containers using port 8000: \$container_ids"
              echo "\$container_ids" | xargs docker stop | xargs docker rm
            else
              echo "No containers using port 8000 found"
            fi
            
            docker stop ${{ secrets.APP_NAME }} || true
            docker rm -f ${{ secrets.APP_NAME }} || true

            # Replace .env file content with secret
            echo "${{ vars.ENV_FILE }}" > /home/$SSH_USERNAME/medcarr_test/backend/.env

            

            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin ${{ env.REGISTRY_URL }}

            docker run -d -p 8000:8000 -v /home/$SSH_USERNAME/app/.env:/app/.env --name ${{ secrets.APP_NAME }} --platform linux/amd64 $IMAGE_TAG
            docker logout

            
            # Remove unused Docker images
            docker image prune -af

            echo "Deployment completed successfully"
            
          EOF
